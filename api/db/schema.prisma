datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int              @id @default(autoincrement())
  email               String           @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  credentials         UserCredential[]
  Deck                Deck[]
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Flashcard {
  id        Int      @id @default(autoincrement())
  deckId    Int
  deck      Deck     @relation(fields: [deckId], references: [id])
  front     String
  back      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deck {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  flashcards    Flashcard[]
  studySetDecks StudySetDeck[]
}

model StudySet {
  id            Int            @id @default(autoincrement())
  deckId        Int
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  studySetDecks StudySetDeck[]
}

model StudySetDeck {
  id         Int      @id @default(autoincrement())
  studySetId Int
  studySet   StudySet @relation(fields: [studySetId], references: [id])
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
