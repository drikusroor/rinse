datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  hashedPassword      String
  salt                String
  resetToken          String?
  resetTokenExpiresAt DateTime?
  credentials         UserCredential[]
  deck                Deck[]
  PlaySession         PlaySession[]
  firstName           String?
  lastName            String?
  layConfigurations   PlayConfiguration[]
}

model UserCredential {
  id         String  @id
  userId     Int
  user       User    @relation(fields: [userId], references: [id])
  publicKey  Bytes
  transports String?
  counter    BigInt
}

model Flashcard {
  id           Int                    @id @default(autoincrement())
  deckId       Int
  deck         Deck                   @relation(fields: [deckId], references: [id])
  front        String[]
  back         String[]
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  interactions FlashcardInteraction[]
}

model Deck {
  id            Int            @id @default(autoincrement())
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  flashcards    Flashcard[]
  studySetDecks StudySetDeck[]
  playSessions  PlaySession[]
}

model StudySet {
  id            Int            @id @default(autoincrement())
  deckId        Int
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  studySetDecks StudySetDeck[]
  playSessions  PlaySession[]
}

model StudySetDeck {
  id         Int      @id @default(autoincrement())
  studySetId Int
  studySet   StudySet @relation(fields: [studySetId], references: [id])
  deckId     Int
  deck       Deck     @relation(fields: [deckId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PlaySession {
  id                    Int                    @id @default(autoincrement())
  userId                Int
  user                  User                   @relation(fields: [userId], references: [id])
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  startedAt             DateTime
  endedAt               DateTime?
  deckId                Int?
  deck                  Deck?                  @relation(fields: [deckId], references: [id])
  studySetId            Int?
  studySet              StudySet?              @relation(fields: [studySetId], references: [id])
  flashcardInteractions FlashcardInteraction[]
}

model FlashcardInteraction {
  id            Int         @id @default(autoincrement())
  flashcardId   Int
  flashcard     Flashcard   @relation(fields: [flashcardId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  startedAt     DateTime
  endedAt       DateTime?
  correct       Boolean
  playSessionId Int
  playSession   PlaySession @relation(fields: [playSessionId], references: [id])
}

enum AnswerMode {
  Manual // Default, user has to click to reveal answer
  Text // User has to type in the answer
}

model PlayConfiguration {
  id                     Int        @id @default(autoincrement())
  userId                 Int
  user                   User       @relation(fields: [userId], references: [id])
  name                   String
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  timeUntilNextFlashcard Int // In milliseconds
  amountOfFlashcards     Int? // If null, all flashcards will be played, otherwise only the specified amount (or more)
  firstFlashcardIndex    Boolean? // If true, the first flashcard will be shown first, otherwise it will be random
  answerMode             AnswerMode // Default: Manual
  inverse                Boolean // Default: false, if true, the front and back of the flashcard will be switched
  levenstheinDistance    Int? // Default: null, if null, the answer has to be exactly the same, otherwise the answer will be checked with the levensthein distance
}
